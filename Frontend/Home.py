# -*- coding: utf-8 -*-
"""Enhanced Drug-Target Interaction Prediction App with AutoDock Vina Integration

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gstx4aj233Mg8hIKBa1Y8pSEfXGO8pzh
"""

import nest_asyncio
nest_asyncio.apply()
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)
import os
os.environ["STREAMLIT_SERVER_ENABLE_FILE_WATCHER"] = "none"
import streamlit as st
import base64
import pickle
import numpy as np
from DeepPurpose import DTI as models
from DeepPurpose import utils
from sklearn.preprocessing import MinMaxScaler
import time
from datetime import datetime
from rdkit import Chem
from rdkit.Chem import AllChem, Draw, rdDepictor
from rdkit.Chem.Draw import rdMolDraw2D
import py3Dmol
from stmol import showmol
from Bio.SeqUtils import seq1
from Bio.PDB import PDBParser
from Bio.SeqUtils.ProtParam import ProteinAnalysis
from PIL import Image
import io
import re
import subprocess
import tempfile
import shutil
from pathlib import Path

# Set page config
st.set_page_config(
    page_title="Drug Target Interaction Predictor",
    page_icon="🧪",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better visibility and styling
st.markdown("""
<style>
    /* Main background */
    .main {
        background-color: #f5f5f5;
    }

    /* Input boxes - light gray background with dark text */
    .stTextInput>div>div>input,
    .stTextArea>div>div>textarea {
        background-color: #f0f0f0 !important;
        color: #000000 !important;
        border: 1px solid #ddd !important;
    }

    /* File uploader styling */
    .stFileUploader>div>div>div>div {
        background-color: #f8f9fa !important;
        border: 2px dashed #4a8cff !important;
        border-radius: 8px !important;
    }

    /* Prediction box styling */
    .prediction-box {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 20px;
        margin-top: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        color: #000000 !important;
        border-left: 4px solid #4a8cff;
    }

    /* Better contrast for all text */
    .stMarkdown, .stText, .stNumberInput, .stSelectbox {
        color: #333333 !important;
    }

    /* Button styling */
    .stButton>button {
        background-color: #4a8cff;
        color: white;
        font-weight: bold;
        border: none;
        padding: 10px 24px;
    }

    /* Header colors */
    .header {
        color: #1e3d6b;
    }

    /* Custom metric boxes */
    .metric-box {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 15px;
    }

    /* Interpretation boxes */
    .interpretation-weak {
        background-color: #e8f4fc;
        border-left: 5px solid #3498db;
    }

    .interpretation-moderate {
        background-color: #e8f8f0;
        border-left: 5px solid #2ecc71;
    }

    .interpretation-strong {
        background-color: #fdedec;
        border-left: 5px solid #e74c3c;
    }
    
    /* Visualization tabs */
    .stTabs [data-baseweb="tab-list"] {
        gap: 10px;
    }
    
    .stTabs [data-baseweb="tab"] {
        padding: 8px 20px;
        border-radius: 4px 4px 0 0;
    }
    
    .stTabs [aria-selected="true"] {
        background-color: #4a8cff;
        color: white;
    }
    
    /* Visualization containers */
    .viz-container {
        background-color: white;
        border-radius: 8px;
        padding: 15px;
        margin-top: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    /* Color legend styling */
    .color-legend {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 15px;
        margin: 10px 0;
    }

    /* Input option styling */
    .input-option {
        background-color: #ffffff;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        margin: 10px 0;
    }
    
    /* Docking results styling */
    .docking-result {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        margin: 10px 0;
        border-left: 4px solid #28a745;
    }
    
    .docking-error {
        background-color: #f8d7da;
        border-radius: 8px;
        padding: 15px;
        margin: 10px 0;
        border-left: 4px solid #dc3545;
    }
</style>
""", unsafe_allow_html=True)

class DTIPredictor:
    def __init__(self):
        self.model = None
        self.scaler = None
        self.loaded = False

    def load_components(self):
        """Load model and scaler"""
        try:
            with st.spinner('Loading model components...'):
                with open('best_label_scaler.pkl', 'rb') as f:
                    self.scaler = pickle.load(f)
                self.model = models.model_pretrained('best_tuned_dti_model')
                self.loaded = True
                st.success("✅ Model loaded successfully!")
        except Exception as e:
            st.error(f"❌ Error loading components: {str(e)}")
            self.loaded = False

    def predict(self, smiles, target_sequence):
        """Make predictions"""
        if not self.loaded:
            raise RuntimeError("Model not loaded")

        try:
            X_pred = utils.data_process(
                X_drug=[smiles],
                X_target=[target_sequence],
                y=[0],
                drug_encoding='MPNN',
                target_encoding='CNN',
                split_method='no_split'
            )
            y_pred_norm = self.model.predict(X_pred)[0]
            y_pred_original = self.scaler.inverse_transform([[y_pred_norm]])[0][0]

            return {
                'normalized_prediction': float(y_pred_norm),
                'original_scale_prediction': float(y_pred_original),
                'status': 'success',
                'smiles': smiles,
                'target_sequence': target_sequence
            }
        except Exception as e:
            return {
                'status': 'error',
                'message': str(e)
            }

def parse_pdb_file(pdb_file):
    """Extract sequence from PDB file"""
    try:
        pdb_content = pdb_file.read().decode('utf-8')
        pdb_file.seek(0)  # Reset file pointer
        
        # Parse PDB content to extract sequence
        parser = PDBParser(QUIET=True)
        structure = parser.get_structure('protein', io.StringIO(pdb_content))
        
        # Extract sequence from the first chain
        sequence = ""
        for model in structure:
            for chain in model:
                for residue in chain:
                    if residue.get_id()[0] == ' ':  # Standard amino acid
                        try:
                            sequence += seq1(residue.get_resname())
                        except:
                            sequence += 'X'  # Unknown residue
                break  # Use only first chain
            break  # Use only first model
        
        return sequence, pdb_content
    except Exception as e:
        st.error(f"Error parsing PDB file: {str(e)}")
        return None, None

def parse_fasta_file(fasta_file):
    """Extract sequence from FASTA file"""
    try:
        fasta_content = fasta_file.read().decode('utf-8')
        lines = fasta_content.strip().split('\n')
        sequence = ""
        for line in lines:
            if not line.startswith('>'):
                sequence += line.strip()
        return sequence
    except Exception as e:
        st.error(f"Error parsing FASTA file: {str(e)}")
        return None

def visualize_drug(smiles):
    """Generate 2D and 3D visualizations of the drug molecule"""
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        # Generate 2D image
        rdDepictor.SetPreferCoordGen(True)
        drawer = rdMolDraw2D.MolDraw2DCairo(400, 300)
        
        # Set drawing options
        opts = drawer.drawOptions()
        opts.bondLineWidth = 2
        
        # Generate coordinates and draw
        rdDepictor.Compute2DCoords(mol)
        drawer.DrawMolecule(mol)
        drawer.FinishDrawing()
        
        # Convert to PIL Image
        img = Image.open(io.BytesIO(drawer.GetDrawingText()))
        
        # Generate 3D coordinates
        mol_3d = Chem.AddHs(mol)
        AllChem.EmbedMolecule(mol_3d)
        AllChem.MMFFOptimizeMolecule(mol_3d)
        
        return mol_3d, img
    return None, None

def visualize_protein_structure(sequence, pdb_content=None):
    """Create 3D visualization of protein structure"""
    view = py3Dmol.view(width=400, height=300)
    
    if pdb_content:
        # Use actual PDB structure
        view.addModel(pdb_content, "pdb")
        view.setStyle({'cartoon': {'color': 'spectrum'}})
    else:
        # Generate mock structure from sequence
        pdb_lines = ["REMARK Generated structure from sequence"]
        pdb_lines.append("MODEL 1")
        
        for i in range(min(100, len(sequence))):
            # Create a simple alpha helix structure
            angle = i * 100 * np.pi / 180  # 100 degrees per residue
            x = 1.5 * np.cos(angle)
            y = 1.5 * np.sin(angle)
            z = i * 1.5  # Rise per residue
            resn = sequence[i] if i < len(sequence) else 'A'
            
            pdb_lines.append(
                f"ATOM  {i+1:5}  CA  {resn} A{i+1:4}    "
                f"{x:8.3f}{y:8.3f}{z:8.3f}  1.00  0.00           C"
            )
        
        pdb_lines.append("ENDMDL")
        mock_pdb = "\n".join(pdb_lines)
        view.addModel(mock_pdb, "pdb")
        view.setStyle({'cartoon': {'color': 'spectrum'}})
    
    view.zoomTo()
    return view

def visualize_binding_pose(smiles, sequence, pdb_content=None):
    """Create SwissDock-style binding pose visualization"""
    view = py3Dmol.view(width=700, height=500)

    protein_atoms = []
    use_mock = False

    if pdb_content:
        # Use uploaded structure
        view.addModel(pdb_content, "pdb")
        view.setStyle({'cartoon': {'color': 'lightgray', 'opacity': 0.8}})
        view.zoomTo()

    else:
        # Generate mock structure from sequence
        use_mock = True
        protein_atoms = []
        pdb_lines = ["REMARK Generated structure from sequence"]
        pdb_lines.append("MODEL 1")

        for i in range(min(100, len(sequence))):
            angle = i * 100 * np.pi / 180
            x = 1.5 * np.cos(angle)
            y = 1.5 * np.sin(angle)
            z = i * 1.5
            resn = sequence[i] if i < len(sequence) else 'A'

            protein_atoms.append({
                'x': x, 'y': y, 'z': z,
                'elem': 'C',
                'resn': resn,
                'resi': i + 1
            })

            pdb_lines.append(
                f"ATOM  {i+1:5}  CA  {resn} A{i+1:4}    "
                f"{x:8.3f}{y:8.3f}{z:8.3f}  1.00  0.00           C"
            )

        pdb_lines.append("ENDMDL")
        view.addModel("\n".join(pdb_lines), "pdb")
        view.setStyle({'cartoon': {'color': 'spectrum'}})

    # Add drug molecule
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        mol = Chem.AddHs(mol)
        AllChem.EmbedMolecule(mol)
        AllChem.MMFFOptimizeMolecule(mol)
        
        # Convert to PDB block
        pdb_block = Chem.MolToPDBBlock(mol)
        view.addModel(pdb_block, "pdb")
        
        # Style the drug molecule
        view.setStyle({'model': -1}, {'stick': {'colorscheme': 'greenCarbon'}})
        
        # Position the drug near the protein
        if use_mock and protein_atoms:
            # Place near the center of the protein
            center_x = np.mean([a['x'] for a in protein_atoms])
            center_y = np.mean([a['y'] for a in protein_atoms])
            center_z = np.mean([a['z'] for a in protein_atoms])
            
            view.translate(-center_x, -center_y, -center_z, {'model': -1})
            view.zoomTo()

    # Add grid
    view.addGrid({
        'color': 'gray',
        'opacity': 0.1,
        'size': 50,
        'spacing': 5
    })

    return view


def get_protein_properties(sequence):
    try:
        analysis = ProteinAnalysis(sequence)
        return {
            "length": len(sequence),
            "molecular_weight": analysis.molecular_weight(),
            "isoelectric_point": analysis.isoelectric_point(),
            "instability_index": analysis.instability_index()
        }
    except Exception as e:
        st.error(f"Error analyzing protein properties: {str(e)}")
        return None

# Initialize predictor
predictor = DTIPredictor()

# App layout
with open("logo.png", "rb") as image_file:
    encoded = base64.b64encode(image_file.read()).decode()

st.markdown(
    f"""
    <div style="display: flex; align-items: center;">
        <img src="data:image/png;base64,{encoded}" width="70" style="margin-right: 20px;">
        <h1 style="font-size: 32px; margin: 0;">DRUG–TARGET INTERACTION PREDICTOR</h1>
    </div>
    """,
    unsafe_allow_html=True
)
st.markdown("""
This webserver predicts interaction strength between drug molecules (SMILES) and protein targets using a DeepPurpose Framework.
""")

# Sidebar for info
with st.sidebar:
    st.header("Example Inputs")
    st.markdown("""
    **SMILES:(Imipramine)**
    `CN(C)CCCN1C2=CC=CC=C2CCC2=CC=CC=C12`

    **PDB File**:
    Upload a PDB file containing your target protein structure
    """)
    

# Main content
col1, col2 = st.columns([0.8, 1.2])

with col1:
    st.subheader("INPUT PARAMETERS")

    # Drug input
    st.markdown("#### Drug Input")
    smiles_input = st.text_area(
        "Drug SMILES String",
        height=100,
        placeholder="Enter SMILES notation of the drug compound...",
        help="Example: CC(=O)OC1=CC=CC=C1C(=O)O (Aspirin)"
    )

    # Protein input - PDB only
    st.markdown("#### PROTEIN INPUT")
    target_sequence = None
    pdb_content = None

    pdb_file = st.file_uploader(
        "Upload PDB file",
        type=['pdb'],
        help="Upload a PDB file containing the protein structure"
    )

    if pdb_file:
        target_sequence, pdb_content = parse_pdb_file(pdb_file)
        if target_sequence:
            st.success(f"✅ Structure loaded: {len(target_sequence)} residues")
            with st.expander("View sequence"):
                st.text(target_sequence[:200] + "..." if len(target_sequence) > 200 else target_sequence)

    # Show protein properties if sequence is available
    if target_sequence:
        props = get_protein_properties(target_sequence)
        if props:
            with st.expander("Protein Properties"):
                col_a, col_b = st.columns(2)
                with col_a:
                    st.metric("Length", f"{props['length']} aa")
                    st.metric("Molecular Weight", f"{props['molecular_weight']:.1f} Da")
                with col_b:
                    st.metric("Isoelectric Point", f"{props['isoelectric_point']:.2f}")
                    st.metric("Instability Index", f"{props['instability_index']:.2f}")

    predict_button = st.button("🔬 Predict Interaction", type="primary")

with col2:
    st.subheader("PREDICTION RESULTS")
    results_placeholder = st.empty()
    viz_placeholder = st.empty()

    if predict_button:
        if not smiles_input or not target_sequence:
            st.warning("Please provide both SMILES and PDB file")
        else:
            if not predictor.loaded:
                predictor.load_components()

            if predictor.loaded:
                with st.spinner('Making prediction...'):
                    time.sleep(0.5)
                    result = predictor.predict(smiles_input, target_sequence)

                    if result['status'] == 'success':
                        with results_placeholder.container():
                            # Main prediction box
                            st.markdown(f"""
                            <div class="prediction-box">
                                <div style="display: flex; justify-content: space-between; gap: 15px; margin-bottom: 20px;">
                                    <div class="metric-box" style="width: 48%;">
                                        <h4 style='color:#2c3e50; margin-top: 0;'>Normalized Score</h4>
                                        <p style="font-size: 24px; font-weight: bold; color: #3498db; text-align: center; margin: 10px 0;">
                                            {result['normalized_prediction']:.4f}
                                        </p>
                                        <p style="font-size: 14px; color: #7f8c8d; text-align: center;">
                                            (0-1 scale where 1 = strongest interaction)
                                        </p>
                                    </div>
                                    <div class="metric-box" style="width: 48%;">
                                        <h4 style='color:#2c3e50; margin-top: 0;'>Binding Energy</h4>
                                        <p style="font-size: 24px; font-weight: bold; color: #3498db; text-align: center; margin: 10px 0;">
                                            {result['original_scale_prediction']:.2f}
                                        </p>
                                        <p style="font-size: 14px; color: #7f8c8d; text-align: center;">
                                            (kcal/mol - more negative = stronger binding)
                                        </p>
                                    </div>
                                </div>
                            </div>
                            """, unsafe_allow_html=True)
                                                                                                                                    
                            # Color-coded interpretation
                            original_value = result['original_scale_prediction']
                            st.markdown("### Interpretation")
                            if original_value > -3.1:
                                st.markdown(f"""
                                <div class="interpretation-weak" style="padding: 15px; border-radius: 8px; background-color: #e8f4fc; border-left: 5px solid #3498db;">
                                    <h4 style="color: #3498db; margin-top: 0;">
                                        <span style="font-size: 24px;">🔵</span> Very Weak Interaction ({original_value:.2f} kcal/mol)
                                    </h4>
                                    <p>Indicates a likely non-significant or biologically irrelevant interaction.</p>
                                    <p><b>Recommendation:</b> These ligands are typically unsuitable for further consideration unless supported by additional evidence.</p>
                                </div>
                                """, unsafe_allow_html=True)
                                
                            elif -5.5 < original_value <= -3.5:
                                st.markdown(f"""
                                <div class="interpretation-weak" style="padding: 15px; border-radius: 8px; background-color: #e8f8f0; border-left: 5px solid #27ae60;">
                                    <h4 style="color: #27ae60; margin-top: 0;">
                                        <span style="font-size: 24px;">🟢</span> Weak Interaction ({original_value:.2f} kcal/mol)
                                    </h4>
                                    <p>Suggests non-specific or transient interactions.</p>
                                    <p><b>Recommendation:</b> Could be considered for structural modification to improve binding.</p>
                                </div>
                                """, unsafe_allow_html=True)
                                
                            elif -7.5 < original_value <= -5.5:
                                st.markdown(f"""
                                <div class="interpretation-moderate" style="padding: 15px; border-radius: 8px; background-color: #fff3cd; border-left: 5px solid #f39c12;">
                                    <h4 style="color: #f39c12; margin-top: 0;">
                                        <span style="font-size: 24px;">🟠</span> Moderate Interaction ({original_value:.2f} kcal/mol)
                                    </h4>
                                    <p>The interaction appears reasonable and worth investigating.</p>
                                    <p><b>Recommendation:</b> Requires further optimization or SAR studies before experimental validation.</p>
                                </div>
                                """, unsafe_allow_html=True)
                                
                            elif -9.5 < original_value <= -7.5:
                                 st.markdown(f"""
                                 <div class="interpretation-strong" style="padding: 15px; border-radius: 8px; background-color: #f8d7da; border-left: 5px solid #e74c3c;">
                                     <h4 style="color: #e74c3c; margin-top: 0;">
                                         <span style="font-size: 24px;">🔴</span> Strong Interaction ({original_value:.2f} kcal/mol)
                                     </h4>
                                     <p>Suggests potential biological activity worth further investigation.</p>
                                     <p><b>Recommendation:</b> Recommended for experimental follow-up studies and binding assays.</p>
                                 </div>
                                 """, unsafe_allow_html=True)
                            else:
                                st.markdown(f"""
                                <div class="interpretation-strong" style="padding: 15px; border-radius: 8px; background-color: #d1ecf1; border-left: 5px solid #c0392b;">
                                    <h4 style="color: #c0392b; margin-top: 0;">
                                        <span style="font-size: 24px;">🔥</span> Very Strong Interaction ({original_value:.2f} kcal/mol)
                                    </h4>
                                    <p>Indicates a highly favorable and potentially biologically relevant interaction.</p>
                                    <p><b>Recommendation:</b> High priority for in vitro/in vivo validation as a lead candidate.</p>
                                </div>
                                """, unsafe_allow_html=True)

                            # Confidence indicator
                            st.markdown("### Confidence Indicators")
                            st.markdown("""
                            <div class="metric-box">
                                <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                                    <span>Model Confidence</span>
                                    <span>75%</span>
                                </div>
                                <div style="height: 10px; background-color: #ecf0f1; border-radius: 5px;">
                                    <div style="width: 75%; height: 100%; background-color: #3498db; border-radius: 5px;"></div>
                                </div>
                                <p style="font-size: 12px; color: #7f8c8d; margin-top: 5px;">
                                    Based on model performance metrics and prediction characteristics
                                </p>
                            </div>
                            """, unsafe_allow_html=True)
                            
                        # Enhanced visualization section
                        with st.container():
                            st.markdown("### 🔬 MOLECULAR VISUALIZATION SUITE")
                            
                            # Create tabs for different visualizations
                            viz_tabs = st.tabs([
                                "🧪 Drug Structure (2D)", 
                                "🧬 Protein Structure (3D)",
                                "🔗 Binding Pose Prediction",
                            ])
                            
                            with viz_tabs[0]:  # 2D Drug Structure
                                st.markdown("<div class='viz-container'>", unsafe_allow_html=True)
                                st.markdown("#### 2D Chemical Structure")
                                mol, img = visualize_drug(result['smiles'])
                                if img:
                                    col_img, col_info = st.columns([2, 1])
                                    with col_img:
                                        st.image(img, caption="Drug Molecule (2D Structure)", use_container_width=True)
                                    with col_info:
                                        st.markdown("""
                                        **Color Guide:**
                                        - ⚫ **Black**: Carbon
                                        - 🔴 **Red**: Oxygen
                                        - 🔵 **Blue**: Nitrogen
                                        - 🟡 **Yellow**: Sulfur
                                        - 🟢 **Green**: Halogens
                                        """)
                                        if mol:
                                            st.metric("Molecular Weight", f"{Chem.Descriptors.MolWt(mol):.1f}")
                                            st.metric("Heavy Atoms", Chem.Descriptors.HeavyAtomCount(mol))
                                            st.metric("Rotatable Bonds", Chem.Descriptors.NumRotatableBonds(mol))
                                else:
                                    st.warning("Could not generate 2D structure from SMILES")
                                st.markdown("</div>", unsafe_allow_html=True)
                            
                            
                            with viz_tabs[1]:  # 3D Protein Structure
                                st.markdown("<div class='viz-container'>", unsafe_allow_html=True)
                                st.markdown("#### 3D Protein Structure")
                                col_protein, col_info = st.columns([3, 1])
                                
                                with col_protein:
                                    try:
                                        protein_view = visualize_protein_structure(result['target_sequence'], pdb_content)
                                        if protein_view is not None:
                                            showmol(protein_view, height=400, width=500)
                                        else:
                                            st.error("Could not generate protein visualization")
                                    except Exception as e:
                                        st.error(f"Error generating protein visualization: {str(e)}")
                                        st.info("This could be due to issues with the PDB file format or py3Dmol library.")
                                
                                with col_info:
                                    st.markdown("""
                                    **Protein Structure Colors:**
                                    - 🌈 **Spectrum**: N-terminus (blue) to C-terminus (red)
                                    - 🔴 **Red**: Alpha helices
                                    - 🟡 **Yellow**: Beta sheets
                                    - 🟢 **Green**: Loop regions
                                    - 🔵 **Blue**: Turn regions
                                    
                                    **Structure Type:**
                                    """)
                                    if pdb_content:
                                        st.success("✅ Real PDB Structure")
                                    else:
                                        st.info("ℹ️ Generated from Sequence")
                                        
                                    st.markdown(f"""
                                    **Protein Info:**
                                    - Length: {len(result['target_sequence'])} residues
                                    - Source: PDB File
                                    """)
                                
                                st.markdown("</div>", unsafe_allow_html=True)
                            
                            with viz_tabs[2]:  # Binding Pose Prediction
                                st.markdown("<div class='viz-container'>", unsafe_allow_html=True)
                                st.markdown("#### Predicted Binding Pose")
                                col_binding, col_info = st.columns([2, 0.5])
                                
                                with col_binding:
                                    try:
                                        binding_view = visualize_binding_pose(result['smiles'], result['target_sequence'], pdb_content)
                                        if binding_view is not None:
                                            showmol(binding_view, height=500, width=500)
                                        else:
                                            st.error("Could not generate binding pose visualization")
                                    except Exception as e:
                                        st.error(f"Error generating binding pose: {str(e)}")
                                
                                with col_info:
                                    st.markdown("""
                                    **Visualization Guide:**
                                    - 🧬 **Gray Cartoon**: Protein structure
                                    - 🧪 **Green Sticks**: Drug molecule
                                    
                                    **Note:This is a predicted binding pose based on molecular properties.
                                    For accurate docking results, use the Molecular Docking tab.**
                                    """)
                                
                                st.markdown("</div>", unsafe_allow_html=True)
                            


# Footer with enhanced information
st.markdown(f"""
<div style="text-align: center; padding: 10px; color: #7f8c8d; font-size: 14px;">
    <p> DTI Predictor | Developed using Streamlit and DeepPurpose | © {datetime.now().year} Drug Discovery AI</p>
</div>
""", unsafe_allow_html=True)